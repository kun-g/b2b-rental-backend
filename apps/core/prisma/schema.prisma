datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  CUSTOMER
  MERCHANT
  ADMIN
}

enum OrderStatus {
  NEW
  PAID
  TO_SHIP
  SHIPPED
  IN_RENT
  RETURNING
  RETURNED
  COMPLETED
  CANCELED
}

model Tenant {
  id        String     @id @default(cuid())
  name      String
  users     User[]
  merchants Merchant[]
}

model User {
  id           String   @id @default(cuid())
  email        String   @unique
  passwordHash String
  role         Role
  tenantId     String
  tenant       Tenant   @relation(fields: [tenantId], references: [id])
  credits      Credit[]
  createdAt    DateTime @default(now())
}

model Merchant {
  id                 String             @id @default(cuid())
  name               String
  tenantId           String
  tenant             Tenant             @relation(fields: [tenantId], references: [id])
  skus               SKU[]
  credits            Credit[]
  shippingTemplates  ShippingTemplate[]
}

model SKU {
  id           String    @id @default(cuid())
  merchantId   String
  merchant     Merchant  @relation(fields: [merchantId], references: [id])
  name         String
  categoryId   String?
  category     Category? @relation(fields: [categoryId], references: [id])
  pricePerDay  Int
  inventoryQty Int     @default(0)
  active       Boolean @default(true)
}

model Category {
  id       String    @id @default(cuid())
  name     String
  path     String?
  parentId String?
  parent   Category? @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children Category[] @relation("CategoryHierarchy")
  skus     SKU[]
  @@map("categories")
}

model ShippingTemplate {
  id         String                     @id @default(cuid())
  merchantId String
  merchant   Merchant @relation(fields: [merchantId], references: [id], onDelete: Cascade)
  name       String
  defaultFee Int
  rules      ShippingRegionRule[]
  blacklists ShippingBlacklistRegion[]
}

model ShippingRegionRule {
  id         String @id @default(cuid())
  templateId String
  regionPath String
  fee        Int
  template   ShippingTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  @@map("shipping_region_rules")
}

model ShippingBlacklistRegion {
  id         String @id @default(cuid())
  templateId String
  regionPath String
  template   ShippingTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@map("shipping_blacklist_regions")
}

model Credit {
  id         String @id @default(cuid())
  merchantId String
  merchant   Merchant @relation(fields: [merchantId], references: [id], onDelete: Cascade)
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  limitCents Int
  holdCents  Int    @default(0)

  @@map("credits")
}

model Order {
  id                  String      @id @default(cuid())
  tenantId            String
  customerId          String
  merchantId          String
  status              OrderStatus @default(NEW)
  skuId               String
  qty                 Int         @default(1)
  rentStart           DateTime
  rentEnd             DateTime
  shipToRegionPath    String
  shipToAddress       Json
  shippingFee         Int
  depositCents        Int         @default(0)
  addressChangeCount  Int         @default(0)
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt
  @@map("orders")
}

model Surcharge {
  id     String @id @default(cuid())
  orderId String
  amount Int
  reason String
  @@map("surcharges")
}

model Statement {
  id      String @id @default(cuid())
  orderId String
  total   Int
  payload Json?

  @@map("statements")
}

model AuditLog {
  id       String   @id @default(cuid())
  actorId  String?
  action   String
  entity   String
  entityId String
  diff     Json?
  ts       DateTime @default(now())

  @@map("audit_logs")
}

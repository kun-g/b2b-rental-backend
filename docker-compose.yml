version: '3.9'

services:
  postgres:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: rental
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - '5432:5432'
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - backend

  core:
    build:
      context: .
      dockerfile: apps/core/Dockerfile
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      DATABASE_URL: \
        ${DATABASE_URL:-postgresql://postgres:postgres@postgres:5432/rental?schema=public}
      CORE_PORT: ${CORE_PORT:-4001}
      JWT_SECRET: ${JWT_SECRET:-dev-secret}
    ports:
      - '4001:4001'
    networks:
      - backend

  cms:
    build:
      context: .
      dockerfile: apps/cms/Dockerfile
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      DATABASE_URL: \
        ${DATABASE_URL:-postgresql://postgres:postgres@postgres:5432/rental?schema=public}
      CMS_PORT: ${CMS_PORT:-4002}
      PAYLOAD_SECRET: ${PAYLOAD_SECRET:-dev-payload}
      NODE_ENV: production
    ports:
      - '4002:4002'
    networks:
      - backend

volumes:
  postgres-data:

networks:
  backend:
    driver: bridge

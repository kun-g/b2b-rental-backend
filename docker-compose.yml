services:
  postgres:
    image: postgres:17-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-cms}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - '5432'
    networks:
      - rent-backend-network
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-cms}']
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  cms:
    build:
      context: .
      dockerfile: Dockerfile
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      DATABASE_URI: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/${POSTGRES_DB:-cms}
      PAYLOAD_SECRET: ${PAYLOAD_SECRET:-dev-payload-secret-change-in-production}

      NODE_ENV: production
      NEXT_TELEMETRY_DISABLED: 1
    ports:
      - '${CMS_PORT:-3000}'
    networks:
      - rent-backend-network
    healthcheck:
      test: ['CMD-SHELL', 'wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

networks:
  rent-backend-network:
    driver: bridge

volumes:
  postgres-data:

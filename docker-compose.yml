services:
  # PostgreSQL 数据库服务
  postgres:
    image: postgres:17-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-rental}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      PGDATA: /var/lib/postgresql/data/pgdata
    # Note: PostgreSQL port is not exposed to host for security.
    # CMS connects via internal Docker network.
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-rental}']
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - backend

  # CMS 应用服务 (Next.js + Payload CMS)
  cms:
    build:
      context: .
      dockerfile: apps/cms/Dockerfile
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      # 数据库连接 (Payload 使用 DATABASE_URI)
      DATABASE_URI: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/${POSTGRES_DB:-rental}

      # Payload CMS 配置
      PAYLOAD_SECRET: ${PAYLOAD_SECRET:-dev-payload-secret-change-in-production}

      # Next.js 配置
      NODE_ENV: production
      PORT: 3000
      NEXT_TELEMETRY_DISABLED: 1
    ports:
      - '${CMS_PORT:-3000}'
    networks:
      - backend

volumes:
  postgres-data:

networks:
  backend:
    driver: bridge
